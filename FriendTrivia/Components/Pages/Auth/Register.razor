@page "/register"
@using FriendTrivia.Services
@using System.ComponentModel.DataAnnotations
@using Microsoft.CodeAnalysis.Elfie.Serialization
@inject AuthService authService
@inject NavigationManager NavigationManager

<PageTitle>Register - Friend Trivia</PageTitle>

<div class="hero min-h-screen bg-base-200">
    <div class="hero-content flex-col">
        <div class="text-center">
            <h1 class="text-5xl font-bold">Register</h1>
            <p class="py-6">Create an account to start playing Friend Trivia!</p>
        </div>
        <div class="card flex-shrink-0 w-full max-w-sm shadow-2xl bg-base-100">
            <div class="card-body">
                <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration">
                    <DataAnnotationsValidator />

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-error">
                            <svg xmlns="http://www.w3.org/2000/svg" class="stroke-current shrink-0 h-6 w-6" fill="none"
                                viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z" />
                            </svg>
                            <span>@errorMessage</span>
                        </div>
                    }

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Username</span>
                        </label>
                        <InputText @bind-Value="registerModel.Username" class="input input-bordered" />
                        <ValidationMessage For="@(() => registerModel.Username)" class="text-error text-sm" />
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Password</span>
                        </label>
                        <InputText type="password" @bind-Value="registerModel.Password" class="input input-bordered" />
                        <ValidationMessage For="@(() => registerModel.Password)" class="text-error text-sm" />
                    </div>

                    <div class="form-control">
                        <label class="label">
                            <span class="label-text">Confirm Password</span>
                        </label>
                        <InputText type="password" @bind-Value="registerModel.ConfirmPassword"
                            class="input input-bordered" />
                        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" class="text-error text-sm" />
                    </div>

                    <div class="form-control mt-6 flex justify-center">
                        <button type="submit" class="btn btn-primary w-full">Register</button>
                    </div>

                    <div class="text-center mt-4">
                        <a href="/login" class="link link-hover">Already have an account? Login</a>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private RegisterModel registerModel { get; set; } = new();

    private string? errorMessage;

    public class RegisterModel
    {
        [Required(ErrorMessage = "Username is required")]
        [MinLength(3, ErrorMessage = "Username must be at least 3 characters")]
        [MaxLength(50, ErrorMessage = "Username must be at most 50 characters")]
        public string Username { get; set; } = "";

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = "";

        [Required(ErrorMessage = "Please confirm your password")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = "";
    }

    public async Task HandleRegistration()
    {
        Console.WriteLine("Attempting Registration");
        try
        {
            errorMessage = null;
            var user = await authService.RegisterAsync(registerModel.Username, registerModel.Password);

            if (user == null)
            {
                errorMessage = "Username is already taken";
                return;
            }
            Console.WriteLine("Successfully Resgistration");
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
}